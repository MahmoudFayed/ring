.. index:: 
	single: What is new in Ring 1.21; Introduction

========================
What is new in Ring 1.21
========================

In this chapter we will learn about the changes and new features in Ring 1.21 release.

.. index:: 
	pair: What is new in Ring 1.21?; List of changes and new features

List of changes and new features
================================

Ring 1.21 comes with the next features!

* ForEach Keyword
* More Improvements

.. index:: 
	pair: What is new in Ring  1.21; ForEach Keyword

ForEach Keyword
===============

This release support using the ForEach keyword in For-in loops

Example:

.. code-block:: ring

	aList = 1:10
	ForEach x in aList
		? x
	Next

.. index:: 
	pair: What is new in Ring  1.21; More Improvements

More Improvements
=================

* RingInternetLib - Set CURLOPT_USERAGENT in Download() function
* RingQt - Qt version is updated from Qt 5.15.16 to 5.15.17
* Ring API - Implementation through functions that get a pointer to the VM structure  
* Ring Compiler - Add new lines between error messages
* Ring Compiler - Check argument duplication during function definition
* Ring Compiler - Call command - Better error messages
* Ring Compiler - ICO_SETPROPERTY - No arguments are required
* Ring Compiler - ICO_NEWLINE instruction - Check if the previous instruction is ICO_NEWLINE
* Ring Compiler/VM - Added ICO_PUSHNL instruction - Push new line to the stack
* Ring Compiler/VM - Added ICO_LISTITEMN instruction - Add number to the current list
* Ring Compiler/VM - Added ICO_LISTITEMC instruction - Add string to the current list
* Ring Compiler/VM - Added ICO_STEPFROMREG instruction
* Ring Compiler/VM - Better support for operator overloading
* Ring Compiler/VM - String structure - Store small strings in the structure
* Ring VM - ByteCode registers count is reduced from four to two (reduce memory usage)
* Ring VM - Setter/Getter/OperatorOverloading - Don't use ring_vm_eval()
* Ring VM - Use GC functions when using strings in the VM stack
* Ring VM - Calling C functions - Better Performance 
* Ring VM - Calling Ring functions - Better Performance
* Ring VM - Use VM Stack for passing arguments to C functions
* Ring VM - Better support for list items of new objects when using lists during defintion 
* Ring VM - List() function - Use blocks only if the list size is greater than 30 items 
* Ring VM - Better code when deleting lists created using the List() function
* Ring VM - Set the loop variable when using for-in and NULL string
* Ring VM - Better implementation when using the for-in loop and new objects
* Ring VM - Better implementation for deleting the item reference inside the for-in loop variable 
* Ring VM - Check the sub list size when using string index (The size must be two [:key = value]) 
* Ring VM - ring_vm_freetemplists() - Avoid unnecessary lock/unlock when using threads
* Ring VM - Low level function - ringvm_codelist() - Better implementation
* Ring VM - File vmthreads.c renamed to vmthread.c
* Ring VM - FuncCall structure - Removed unused member (nTempMemSizeAtStart)
* Ring VM - ring_vm_stepnumber() and ring_vm_sum() - Use: RING_VM_RETURNIFACTIVECATCH
* Ring VM - ring_state_runcode() - Reset pVM->nPC to instructions count before code eval/execution
* Ring VM - Hash Table - Better performance when using many variables
* Ring VM - Object Attributes - Better performance when checking setter/getter methods
* Ring VM - BraceError() method - Support using This and runtime error messages
* Ring VM - ring_state_free() - Better code for threads support
* Ring VM - ring_vm_eval() - Better code for deleting the byte code
* Ring VM - Produce runtime error when using a negative value in shift operations
* Ring VM - ring_vm_createtemplist() implementation - Take in mind the PC and OPCode
* Ring VM - Share information about different levels of the memory pool when creating new thread
* Ring VM - ICO_SETREFERENCE - Check the variable list size
* Ring VM - Remove ICO_FUNCEXE and ICO_ENDFUNCEXE instructions
