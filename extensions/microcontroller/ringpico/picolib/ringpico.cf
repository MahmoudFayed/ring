<code>
#include "pico/stdlib.h"
#include "hardware/adc.h"
#include "hardware/i2c.h"
#include "hardware/spi.h"
#include "hardware/pwm.h"

</code>

<libinitfunc> ring_vm_pico_loadfunctions

<constant>
PICO_DEFAULT_LED_PIN
GPIO_OUT
</constant>

<runcode>
aNumberTypes + "uint"
aNumberTypes + "bool"
aNumberTypes + "uint8_t"
aNumberTypes + "uint16_t"
aNumberTypes + "uint32_t"
aEnumTypes + "enum gpio_function"
aEnumTypes + "enum gpio_slew_rate"
aEnumTypes + "enum gpio_drive_strength"
</runcode>

void sleep_ms(int)

<comment>
Hardware GPIO functions 
</comment>

void gpio_set_function(uint gpio, enum gpio_function fn)
enum gpio_function gpio_get_function(uint gpio)
void gpio_set_pulls(uint gpio, bool up, bool down)
void gpio_pull_up(uint gpio)
bool gpio_is_pulled_up(uint gpio)
void gpio_pull_down(uint gpio)
bool gpio_is_pulled_down(uint gpio)
void gpio_disable_pulls(uint gpio)
void gpio_set_irqover(uint gpio, uint value)
void gpio_set_outover(uint gpio, uint value)
void gpio_set_inover(uint gpio, uint value)
void gpio_set_oeover(uint gpio, uint value)
void gpio_set_input_enabled(uint gpio, bool enabled)
void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled)
bool gpio_is_input_hysteresis_enabled(uint gpio)
void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew)
enum gpio_slew_rate gpio_get_slew_rate(uint gpio)
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive)
enum gpio_drive_strength gpio_get_drive_strength(uint gpio)
void gpio_set_irq_enabled(uint gpio, uint32_t event_mask, bool enabled)
void gpio_set_dormant_irq_enabled(uint gpio, uint32_t event_mask, bool enabled)
uint32_t gpio_get_irq_event_mask(uint gpio)
void gpio_acknowledge_irq(uint gpio, uint32_t event_mask)
void gpio_init(uint gpio)
void gpio_deinit(uint gpio)
void gpio_init_mask(uint gpio_mask)
bool gpio_get(uint gpio)
uint32_t gpio_get_all(void)
void gpio_set_mask(uint32_t mask)
void gpio_clr_mask(uint32_t mask)
void gpio_xor_mask(uint32_t mask)
void gpio_put_masked(uint32_t mask, uint32_t value)
void gpio_put_all(uint32_t value)
void gpio_put(uint gpio, bool value)
bool gpio_get_out_level(uint gpio)
void gpio_set_dir_out_masked(uint32_t mask)
void gpio_set_dir_in_masked(uint32_t mask)
void gpio_set_dir_masked(uint32_t mask, uint32_t value)
void gpio_set_dir_all_bits(uint32_t values)
void gpio_set_dir(uint gpio, bool out)
bool gpio_is_dir_out(uint gpio)
uint gpio_get_dir(uint gpio)

<comment>
void gpio_set_irq_callback(gpio_irq_callback_t callback)
void gpio_set_irq_enabled_with_callback(uint gpio, uint32_t event_mask, bool enabled, gpio_irq_callback_t callback)
void gpio_add_raw_irq_handler_with_order_priority_masked(uint gpio_mask, irq_handler_t handler, uint8_t order_priority)
void gpio_add_raw_irq_handler_with_order_priority(uint gpio, irq_handler_t handler, uint8_t order_priority)
void gpio_add_raw_irq_handler_masked(uint gpio_mask, irq_handler_t handler)
void gpio_add_raw_irq_handler(uint gpio, irq_handler_t handler)
void gpio_remove_raw_irq_handler_masked(uint gpio_mask, irq_handler_t handler)
void gpio_remove_raw_irq_handler(uint gpio, irq_handler_t handler)
</comment>

<comment>
Hardware ADC functions 
</comment>

void adc_init(void)
void adc_gpio_init(uint gpio)
void adc_select_input(uint input)
uint adc_get_selected_input(void)
void adc_set_round_robin(uint input_mask)
void adc_set_temp_sensor_enabled(bool enable)
uint16_t adc_read(void)
void adc_run(bool run)
void adc_set_clkdiv(float clkdiv)
void adc_fifo_setup(bool en, bool dreq_en, uint16_t dreq_thresh, bool err_in_fifo, bool byte_shift)
bool adc_fifo_is_empty(void)
uint8_t adc_fifo_get_level(void)
void adc_fifo_drain(void)
uint16_t adc_fifo_get(void)
uint16_t adc_fifo_get_blocking(void)
void adc_irq_set_enabled(bool enabled)


<comment>
Hardware i2c functions 
</comment>

uint i2c_init(i2c_inst_t *i2c, uint baudrate)
void i2c_deinit(i2c_inst_t *i2c)
uint i2c_set_baudrate(i2c_inst_t *i2c, uint baudrate)
void i2c_set_slave_mode(i2c_inst_t *i2c, bool slave, uint8_t addr)
uint i2c_hw_index(i2c_inst_t *i2c)
int i2c_write_blocking_until(i2c_inst_t *i2c, uint8_t addr, const uint8_t *src, size_t len, bool nostop, absolute_time_t until)
int i2c_read_blocking_until(i2c_inst_t *i2c, uint8_t addr, uint8_t *dst, size_t len, bool nostop, absolute_time_t until)
int i2c_write_timeout_us(i2c_inst_t *i2c, uint8_t addr, const uint8_t *src, size_t len, bool nostop, uint timeout_us)
int i2c_read_timeout_us(i2c_inst_t *i2c, uint8_t addr, uint8_t *dst, size_t len, bool nostop, uint timeout_us)
int i2c_write_blocking(i2c_inst_t *i2c, uint8_t addr, const uint8_t *src, size_t len, bool nostop)
int i2c_read_blocking(i2c_inst_t *i2c, uint8_t addr, uint8_t *dst, size_t len, bool nostop)
size_t i2c_get_write_available(i2c_inst_t *i2c)
size_t i2c_get_read_available(i2c_inst_t *i2c)
void i2c_write_raw_blocking(i2c_inst_t *i2c, const uint8_t *src, size_t len)
void i2c_read_raw_blocking(i2c_inst_t *i2c, uint8_t *dst, size_t len)
uint8_t i2c_read_byte_raw(i2c_inst_t *i2c)
void i2c_write_byte_raw(i2c_inst_t *i2c, uint8_t value)
uint i2c_get_dreq(i2c_inst_t *i2c, bool is_tx)

<comment>
Hardware spi functions 
</comment>

uint spi_init(spi_inst_t *spi, uint baudrate)
void spi_deinit(spi_inst_t *spi)
uint spi_set_baudrate(spi_inst_t *spi, uint baudrate)
uint spi_get_baudrate(const spi_inst_t *spi)
uint spi_get_index(const spi_inst_t *spi)
void spi_set_format(spi_inst_t *spi, uint data_bits, spi_cpol_t cpol, spi_cpha_t cpha, __unused spi_order_t order)
void spi_set_slave(spi_inst_t *spi, bool slave)
bool spi_is_writable(const spi_inst_t *spi)
bool spi_is_readable(const spi_inst_t *spi)
bool spi_is_busy(const spi_inst_t *spi)
int spi_write_read_blocking(spi_inst_t *spi, const uint8_t *src, uint8_t *dst, size_t len)
int spi_write_blocking(spi_inst_t *spi, const uint8_t *src, size_t len)
int spi_read_blocking(spi_inst_t *spi, uint8_t repeated_tx_data, uint8_t *dst, size_t len)
int spi_write16_read16_blocking(spi_inst_t *spi, const uint16_t *src, uint16_t *dst, size_t len)
int spi_write16_blocking(spi_inst_t *spi, const uint16_t *src, size_t len)
int spi_read16_blocking(spi_inst_t *spi, uint16_t repeated_tx_data, uint16_t *dst, size_t len)
uint spi_get_dreq(spi_inst_t *spi, bool is_tx)

<comment>
Hardware PWM functions 
</comment>

uint pwm_gpio_to_slice_num(uint gpio)
uint pwm_gpio_to_channel(uint gpio)
void pwm_config_set_phase_correct(pwm_config *c, bool phase_correct)
void pwm_config_set_clkdiv(pwm_config *c, float div)
void pwm_config_set_clkdiv_int_frac(pwm_config *c, uint8_t integer, uint8_t fract)
void pwm_config_set_clkdiv_int(pwm_config *c, uint div)
void pwm_config_set_clkdiv_mode(pwm_config *c, enum pwm_clkdiv_mode mode)
void pwm_config_set_output_polarity(pwm_config *c, bool a, bool b)
void pwm_config_set_wrap(pwm_config *c, uint16_t wrap)
void pwm_init(uint slice_num, pwm_config *c, bool start)
pwm_config pwm_get_default_config(void)
void pwm_set_wrap(uint slice_num, uint16_t wrap)
void pwm_set_chan_level(uint slice_num, uint chan, uint16_t level)
void pwm_set_both_levels(uint slice_num, uint16_t level_a, uint16_t level_b)
void pwm_set_gpio_level(uint gpio, uint16_t level)
uint16_t pwm_get_counter(uint slice_num)
void pwm_set_counter(uint slice_num, uint16_t c)
void pwm_advance_count(uint slice_num)
void pwm_retard_count(uint slice_num)
void pwm_set_clkdiv_int_frac(uint slice_num, uint8_t integer, uint8_t fract)
void pwm_set_clkdiv(uint slice_num, float divider)
void pwm_set_output_polarity(uint slice_num, bool a, bool b)
void pwm_set_clkdiv_mode(uint slice_num, enum pwm_clkdiv_mode mode)
void pwm_set_phase_correct(uint slice_num, bool phase_correct)
void pwm_set_enabled(uint slice_num, bool enabled)
void pwm_set_mask_enabled(uint32_t mask)
void pwm_set_irq_enabled(uint slice_num, bool enabled)
void pwm_set_irq_mask_enabled(uint32_t slice_mask, bool enabled)
void pwm_clear_irq(uint slice_num)
uint32_t pwm_get_irq_status_mask(void)
void pwm_force_irq(uint slice_num)
uint pwm_get_dreq(uint slice_num)
